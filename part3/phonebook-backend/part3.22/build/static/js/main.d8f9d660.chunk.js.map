{"version":3,"sources":["components/Filter.js","components/Persons.js","components/PersonForm.js","components/Notification.js","services/persons.js","App.js","index.js"],"names":["Filter","props","type","value","filter","onChange","handleChange","Persons","persons","map","person","key","name","number","onClick","removeEntry","id","PersonForm","onSubmit","handleSubmit","newName","handleNameChange","newNumber","handleNumberChange","Notification","notification","condition","message","className","baseUrl","axios","get","then","response","data","post","delete","put","App","useState","setPersons","setNewName","setNewNumber","nameFilter","setNameFilter","setNotification","useEffect","services","initialNames","notify","setTimeout","filtered","length","toLowerCase","includes","event","target","preventDefault","duplicate","find","changedEntry","newEntry","window","confirm","replacedEntry","catch","error","createdEntry","concat","console","log","p","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d8f9d660.chunk.js","sourcesContent":["import React from 'react'\n\nconst Filter = (props) => \n    <div>\n    Filter shown with: <input type=\"text\" value={props.filter} onChange={props.handleChange} />          \n    </div>\n   \nexport default Filter ","import React from 'react'\n\nconst Persons = (props) => {\n  return(\n    props.persons.map(person=>\n      <div key={person.name}>\n        {person.name} {person.number}  <button onClick={() => props.removeEntry(person.id)}>Delete</button>\n      </div>\n    )\n  )\n}\n\n// Interesting note here. I had an error because I used \"persons\" instead of \"props.persons\"\n// Looks like I can't use \n\n\n// const Persons = ({person, removeEntry}) =>\n//   <div>{person.name} {person.number}   <button onClick={removeEntry}>Delete</button> \n//   </div>\n\nexport default Persons\n\n// const Persons = (props) => {\n//   return (\n//     props.persons.map(p =>\n//       <div key={p.name}>\n//         {p.name} {p.number} <button onClick={()=>props.deletePerson(p.id)}>poista</button>\n//       </div>\n//     )\n//   )\n// }","import React from 'react'\n\nconst PersonForm = (props) => {\n    return(\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                Full name: <input value={props.newName} onChange={props.handleNameChange} />\n            </div>\n            <div>\n                Phone number: <input value={props.newNumber} onChange={props.handleNumberChange} />\n            </div>\n            <div>\n                <button type=\"submit\">Add</button>\n            </div>\n        </form>\n    )\n}\n\nexport default PersonForm\n\n// const PersonForm = (props) => {\n//     return (\n//       <form onSubmit={props.handleSubmit}>\n//         <div>\n//           nimi: <input onChange={props.handleNameChange} value={props.newName} />\n//         </div>\n//         <div>\n//           numero: <input onChange={props.handleNumberChange} value={props.newNumber} />\n//         </div>\n//         <div>\n//           <button type=\"submit\">lisää</button>\n//         </div>\n//       </form>\n//     )\n//   }","import React from 'react'\n\nconst Notification = ({ notification }) => {\n    \n    const condition = (notification.message===null)\n        ? null \n        : notification.type==='error'\n        ? <div className=\"error\">{notification.message}</div>\n        : <div className=\"success\">{notification.message}</div>\n    \n    return <div>{condition}</div>\n  }\n\nexport default Notification","import axios from 'axios'\nconst baseUrl = 'api/persons'\n\n// get needs no parameters; it only gets the response\nconst get = () => {\n    const promise = axios.get(baseUrl)\n    return promise.then(response => response.data)\n}\n\nconst create = (person) => {\n    const promise = axios.post(baseUrl, person)\n    return promise.then(response => response.data)\n}\n\nconst remove = (id) => {\n    const promise = axios.delete(`${baseUrl}/${id}`)\n    return promise.then(response => response.data)\n}\n\n// const update = (id, updateObject) => {\n//     const request = axios.put(`${baseUrl}/${id}`, updateObject)\n//     return request.then(response => response.data)\n//   }\n\nconst update = (person) => {\n    const promise = axios.put(`${baseUrl}/${person.id}`, person)\n    return promise.then(response => response.data)\n}\n\nexport default { get, create, remove, update }","import React, { useState, useEffect } from 'react'\nimport Filter from './components/Filter'\nimport Persons from './components/Persons'\nimport PersonForm from './components/PersonForm'\nimport Notification from './components/Notification'\nimport services from './services/persons'\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ nameFilter, setNameFilter ] = useState('') \n  const [ notification, setNotification ] = useState({ message: null })\n  // const [ errorState , setErrorState ] = useState(false)\n\n  useEffect(() => {\n    services\n      .get()\n      .then(initialNames => {\n        setPersons(initialNames)\n      })\n  }, [])\n\n  // all event handlers are pushed up\n  const handleNameChange = (event) => setNewName(event.target.value)\n  const handleNumberChange = (event) => setNewNumber(event.target.value)\n  const handleFilterChange = (event) => setNameFilter(event.target.value)\n\n  // notify is the event handler, and it takes two arguments, namely the message and the type, which by default is set to success.\n  // the EH is given the arguments within the other EHs\n  // It does two things: it sets the notification state to the message in the EH and also the type. \n  // If no type is specified, it is 'success' by default.\n\n  const notify = (message, type='success') => {\n    setNotification({ message, type })\n    setTimeout(()=> setNotification({ message: null }), 8000)\n  }\n   \n  const handleSubmit = (event) => {\n    event.preventDefault()\n\n    const duplicate = persons.find(person => person.name === newName)\n    const changedEntry = {...duplicate, number: newNumber}\n    const newEntry = {\n      name: newName,\n      number: newNumber,\n      }\n        \n    if (duplicate) {\n      const ok = window.confirm(`${newName} is already in the phonebook! Do you want to update the record?`)\n    \n      if (ok) {\n        services\n        .update(changedEntry)\n        .then(replacedEntry => {\n          setPersons(persons.map(person => person.name === newName? replacedEntry : person ))\n          setNewName('')  \n          setNewNumber('')\n          notify(`${replacedEntry.name}'s number was successfully changed!`)\n        })\n        .catch(error => {\n            notify(\n            `${duplicate.name} has already been removed from the server.`, 'error'\n          )\n        }) \n      }\n      return null\n      // Because I didn't add this last return, I got a whole bunch of errors with my key.\n    }\n\n    services\n      .create(newEntry)\n      .then(createdEntry => {\n        setPersons(persons.concat(createdEntry))\n        setNewName('')  \n        setNewNumber('')\n        notify(`${createdEntry.name} was successfully added!`)\n      })\n      .catch(error => {\n        console.log(error.response.data)\n        notify(`${error.response.data.error}`, 'error')\n      }) \n  }\n  \n  const removeEntry = (id) => {\n    // First, create a variable using the id argument given so that we know where to start\n    // After we've established who the person is, we can use the properties of that person (e.g., name, id)\n    const person = persons.find(person => person.id === id)\n    const ok = window.confirm(`Are you sure you want to delete ${person.name}?`)\n\n  // const removeEntry = (id, name) => {\n  // const ok = window.confirm(`Are you sure you want to delete ${name}?`)\n    \n    if (ok) {\n      services\n        .remove(id)\n        .then(() => {\n          setPersons(persons.filter( p => p.id !== id))\n          notify(`${person.name} has been deleted from the phonebook.`)  \n        })\n        .catch(error => {\n          notify(\n          `${person.name} has already been removed from the server.`, 'error'\n          )\n          setPersons(persons.filter( p => p.id !== id))\n        })      \n    }\n    // How come I didn't need a return null here???\n  }\n\n  const filtered = nameFilter.length === 0  \n  ? persons\n  : persons.filter(\n    person => person.name.toLowerCase().includes(nameFilter.toLowerCase()))\n\n  // const filtered = persons.filter(\n  //     person => person.name.toLowerCase().includes(nameFilter.toLowerCase()))\n\n  // const results = () => filtered.map(person =>\n  //   <Persons \n  //     key={person.name} \n  //     person={person} \n  //     removeEntry={()=> removeEntry(person.id, person.name)}\n  //   />)\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification notification={notification} />\n      <Filter \n        filter={nameFilter} \n        handleChange={handleFilterChange} \n        />\n      <h3>Add a new entry</h3>\n      <PersonForm \n        handleSubmit={handleSubmit} \n        newName={newName} \n        newNumber={newNumber} \n        handleNameChange={handleNameChange}\n        handleNumberChange={handleNumberChange}\n        />\n      <h3>Numbers</h3>\n      <div>\n      <Persons \n        persons={filtered}\n        removeEntry={removeEntry}\n        />\n      </div>\n    </div> \n  )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n  )\n\n\n// import React from 'react'\n// import ReactDOM from 'react-dom'\n// import App from './App'\n\n\n// import axios from 'axios'\n \n// axios.get('http://localhost:3001/persons').then(response => {\n//   const persons = response.data\n//   ReactDOM.render(\n//     <App />,\n//     document.getElementById('root')\n//   )\n// })\n\n\n// import React, {useState} from 'react'\n// import ReactDOM from 'react-dom'\n\n// const App = () => {\n//   const contacts = [\n//     { id: 1, name: 'Arto Hellas', number: '040-123456' },\n//     { id: 2, name: 'Ada Lovelace', number: '39-44-5323523' },\n//     { id: 3, name: 'Dan Abramov', number: '12-43-234345' },\n//     { id: 4, name: 'Mary Poppendieck', number: '39-23-6423122' }\n//   ]\n\n//   const [state, setState] = useState('') \n\n//   const filtered = contacts.filter(\n//     contact=> contact.name.toLowerCase().indexOf(state.toLowerCase()) !== -1\n//   )\n\n//   const results = () => filtered.map(contact=> \n//     <li key={contact.id} contact={contact}>{contact.name} {contact.phone}</li>)\n\n//   const handleUpdateSearch = (event) => {\n//     setState(event.target.value)\n//   } \n  \n//     return (\n//       <div>\n//         <h1>Contacts List</h1>\n      \n//         <ul>\n//           {results()}\n//         </ul>\n//         <input type=\"text\" onChange={handleUpdateSearch} value={state}/>\n//       </div>\n//     )\n//   }\n\n// ReactDOM.render(\n//   <App />,\n//   document.getElementById('root')\n// )\n\n\n\n\n// import React from 'react'\n// import ReactDOM from 'react-dom'\n// import App from './App'  // highlight-line\n\n// const notes = [\n//   {\n//     id: 1,\n//     content: 'HTML is easy',\n//     date: '2019-05-30T17:30:31.098Z',\n//     important: true\n//   },\n//   {\n//     id: 2,\n//     content: 'Browser can execute only Javascript',\n//     date: '2019-05-30T18:39:34.091Z',\n//     important: false\n//   },\n//   {\n//     id: 3,\n//     content: 'GET and POST are the most important methods of HTTP protocol',\n//     date: '2019-05-30T19:20:14.298Z',\n//     important: true\n//   }\n// ]\n\n// ReactDOM.render(\n//   <App notes={notes} />,\n//   document.getElementById('root')\n// )\n"],"sourceRoot":""}